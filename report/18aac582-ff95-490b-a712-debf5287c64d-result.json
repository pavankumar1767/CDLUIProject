{"name": "Verify that Adding Notify User list and In-App notifications are received.", "status": "broken", "statusDetails": {"message": "playwright._impl._errors.TimeoutError: Timeout 60000ms exceeded.", "trace": "self = <tests.Notifications.test_TC01_addNotifyUser.TestTC01 object at 0x000002512DAC3DD0>, setup = <Page url='https://149.255.39.63/filter'>\nconfig = <class 'utilities.config.config_stage.Config'>\n\n    @allure.title(\"Verify that Adding Notify User list and In-App notifications are received.\")\n    def test_add_notify_user(self, setup, config):\n        page = setup\n        home_page = HomePage(page)\n        login_page = LoginPage(page)\n        filter_page = FilterPage(page)\n        job_page = JobPage(page)\n    \n        notifyUser = RandomUtils.get_email()\n    \n    \n        login_page.navigate(config.BASE_URL)\n        login_page.enter_username(config.username)\n        login_page.enter_password(config.password)\n        login_page.click_login(\"Sign In\")\n    \n    \n    \n        test_data = TestDataManager.get_test_data()\n        well = test_data[\"wells\"][\"wellname_1\"]\n        Object_list = test_data[\"wells\"][\"RigObjectlist\"]\n        data_Object = \"Rig\"\n    \n        home_page.select_module(\"/jobs\")\n        filter_page.Button(\"Create Job\")\n        filter_page.Button(\"Skip\")\n        filter_page.input_field(well)\n        filter_page.click_search(\"searchicon\")\n        filter_page.select_well(well)\n        wellbore_name = filter_page.get_wellbore_name(well)\n>       filter_page.assert_wellname_button(well)\n\ntests\\Notifications\\test_TC01_addNotifyUser.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\filter_page.py:37: in assert_wellname_button\n    assert self.get_text(element_xpath, f\"{well_name}\") == well_name\npages\\base_page.py:57: in get_text\n    self.page.wait_for_selector(selector)\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\playwright\\sync_api\\_generated.py:7789: in wait_for_selector\n    self._sync(\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\playwright\\_impl\\_page.py:373: in wait_for_selector\n    return await self._main_frame.wait_for_selector(**locals_to_params(locals()))\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\playwright\\_impl\\_frame.py:323: in wait_for_selector\n    await self._channel.send(\"waitForSelector\", locals_to_params(locals()))\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\playwright\\_impl\\_connection.py:59: in send\n    return await self._connection.wrap_api_call(\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\playwright\\_impl\\_connection.py:509: in wrap_api_call\n    return await cb()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Channel object at 0x000002512DF8A3C0>, method = 'waitForSelector'\nparams = {'selector': \"//button[normalize-space()='SND 14 23 FED COM 001 P26 225H']\"}, return_as_dict = False\n\n    async def inner_send(\n        self, method: str, params: Optional[Dict], return_as_dict: bool\n    ) -> Any:\n        if params is None:\n            params = {}\n        if self._connection._error:\n            error = self._connection._error\n            self._connection._error = None\n            raise error\n        callback = self._connection._send_message_to_server(\n            self._object, method, _filter_none(params)\n        )\n        done, _ = await asyncio.wait(\n            {\n                self._connection._transport.on_error_future,\n                callback.future,\n            },\n            return_when=asyncio.FIRST_COMPLETED,\n        )\n        if not callback.future.done():\n            callback.future.cancel()\n>       result = next(iter(done)).result()\nE       playwright._impl._errors.TimeoutError: Timeout 60000ms exceeded.\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\playwright\\_impl\\_connection.py:97: TimeoutError"}, "attachments": [{"name": "Log", "source": "d28ee092-8338-4e8f-b79b-1874ec41ecbf-attachment.txt", "type": "text/plain"}, {"name": "Log", "source": "2875f91e-b3e4-4f29-bc03-cf5170e799ec-attachment.txt", "type": "text/plain"}, {"name": "Log", "source": "cb024cb1-68c2-475c-bff2-c82fc46f3346-attachment.txt", "type": "text/plain"}, {"name": "Log", "source": "9df94765-2b17-4f01-b385-ad50f9679bcd-attachment.txt", "type": "text/plain"}, {"name": "Log", "source": "44f2bfd7-fb45-4685-bd22-ad819bc83fd6-attachment.txt", "type": "text/plain"}, {"name": "Log", "source": "c32ef1fd-1ff7-4856-be81-244893a8de1e-attachment.txt", "type": "text/plain"}, {"name": "Log", "source": "f73fe4b1-48b4-436e-9ca8-c2c4a452a697-attachment.txt", "type": "text/plain"}, {"name": "Log", "source": "d4ff7b09-bbe8-495f-ae23-306bfb55e33e-attachment.txt", "type": "text/plain"}, {"name": "Log", "source": "60e9229e-3c99-4d35-82f3-d3849de8ff0c-attachment.txt", "type": "text/plain"}, {"name": "Log", "source": "b1437d76-7e42-4e1f-b30b-b996fa5c5dbc-attachment.txt", "type": "text/plain"}, {"name": "Log", "source": "60cfae11-55e3-4173-9f03-daf4bebc761b-attachment.txt", "type": "text/plain"}, {"name": "Log", "source": "04bb365a-34f3-4b63-87b3-c27a2abcd943-attachment.txt", "type": "text/plain"}, {"name": "Log", "source": "aa901120-985c-45f0-9810-77d4ca2359a9-attachment.txt", "type": "text/plain"}, {"name": "Log", "source": "fa43107a-59bb-406b-aa3b-2ab61d8045b3-attachment.txt", "type": "text/plain"}, {"name": "Screenshot", "source": "d17992f0-423c-4875-9d40-dea49ff2e858-attachment.png", "type": "image/png"}], "start": 1745495250504, "stop": 1745495343469, "uuid": "6b9e2547-383e-4399-99eb-a41a817e4bce", "historyId": "d56f64867014d7f050e1fa4f7c3b663c", "testCaseId": "d56f64867014d7f050e1fa4f7c3b663c", "fullName": "tests.Notifications.test_TC01_addNotifyUser.TestTC01#test_add_notify_user", "labels": [{"name": "suite", "value": "Notifications"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "tests.Notifications"}, {"name": "subSuite", "value": "TestTC01"}, {"name": "host", "value": "PavanKarri"}, {"name": "thread", "value": "34512-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.Notifications.test_TC01_addNotifyUser"}]}