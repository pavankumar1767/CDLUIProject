{"name": "Verify Filter well with single log curve", "status": "broken", "statusDetails": {"message": "playwright._impl._errors.TimeoutError: Page.wait_for_selector: Timeout 60000ms exceeded.\nCall log:\n  - waiting for locator(\"//span[contains(normalize-space(), 'Skip')]\") to be visible", "trace": "self = <tests.Job.test_TC13_singlelogcurve.TestTC13 object at 0x000001624A1EA930>, setup = <Page url='https://149.255.39.63/filter'>\nconfig = <class 'utilities.config.config_stage.Config'>\n\n    @allure.title(\"Verify Filter well with single log curve\")\n    def test_filter_single_logcurve(self, setup, config):\n        page = setup\n        home_page = HomePage(page)\n        login_page = LoginPage(page)\n        filter_page = FilterPage(page)\n        job_page = JobPage(page)\n    \n        login_page.navigate(config.BASE_URL)\n        login_page.enter_username(config.username)\n        login_page.enter_password(config.password)\n        login_page.click_login(\"Sign In\")\n    \n        test_data = TestDataManager.get_test_data()\n        well = test_data[\"wells\"][\"wellname_1\"]\n        # log = test_data[\"wells\"][\"log_1\"]\n        log = \"TIME_PITS\"\n        Object_list = test_data[\"wells\"][\"objectlist\"]\n    \n        home_page.select_module(\"/jobs\")\n        filter_page.Button(\"Create Job\")\n>       filter_page.Button(\"Skip\")\n\ntests\\Job\\test_TC13_singlelogcurve.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\filter_page.py:121: in Button\n    self.click(element_xpath, f\"{button_text}\")\npages\\base_page.py:30: in click\n    self.page.wait_for_selector(selector)\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\playwright\\sync_api\\_generated.py:8183: in wait_for_selector\n    self._sync(\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\playwright\\_impl\\_page.py:425: in wait_for_selector\n    return await self._main_frame.wait_for_selector(**locals_to_params(locals()))\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\playwright\\_impl\\_frame.py:323: in wait_for_selector\n    await self._channel.send(\"waitForSelector\", locals_to_params(locals()))\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x000001624C009C10>, cb = <function Channel.send.<locals>.<lambda> at 0x000001624A5F9580>\nis_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Page.wait_for_selector: Timeout 60000ms exceeded.\nE           Call log:\nE             - waiting for locator(\"//span[contains(normalize-space(), 'Skip')]\") to be visible\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError"}, "attachments": [{"name": "Log", "source": "00da64df-e768-4d02-9a6b-b246d379da71-attachment.txt", "type": "text/plain"}, {"name": "Log", "source": "f168531d-c8b9-4ef1-bd94-de42c98e9d26-attachment.txt", "type": "text/plain"}, {"name": "Log", "source": "fe2af763-be0f-4e25-a454-6c00797e3d79-attachment.txt", "type": "text/plain"}, {"name": "Log", "source": "b6a627cf-6a0a-4b35-9368-036b125b45d0-attachment.txt", "type": "text/plain"}, {"name": "Log", "source": "0d6318fb-226e-4ff3-9ffc-1ac18e6b9d7c-attachment.txt", "type": "text/plain"}, {"name": "Log", "source": "d4061fde-8caf-4956-8e96-a12764b80e02-attachment.txt", "type": "text/plain"}, {"name": "Log", "source": "22bc3c5d-b8c7-46c3-aa00-f5eca8fb0c76-attachment.txt", "type": "text/plain"}, {"name": "Screenshot", "source": "d0b7205e-991a-4542-beb6-5306a5b49d1d-attachment.png", "type": "image/png"}], "start": 1744275957744, "stop": 1744276078614, "uuid": "2476fc16-a0d0-4548-86dd-a8cf96952689", "historyId": "c5c513ee9512656c764e0176b54c88c0", "testCaseId": "c5c513ee9512656c764e0176b54c88c0", "fullName": "tests.Job.test_TC13_singlelogcurve.TestTC13#test_filter_single_logcurve", "labels": [{"name": "suite", "value": "data extraction single log"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "tests.Job"}, {"name": "subSuite", "value": "TestTC13"}, {"name": "host", "value": "PavanKarri"}, {"name": "thread", "value": "30756-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.Job.test_TC13_singlelogcurve"}]}