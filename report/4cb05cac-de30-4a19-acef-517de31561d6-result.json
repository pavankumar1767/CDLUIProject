{"name": "Verify that Adding Notify User list and In-App notifications are received.", "status": "broken", "statusDetails": {"message": "playwright._impl._errors.TimeoutError: Timeout 60000ms exceeded.", "trace": "self = <tests.Notifications.test_TC01_addNotifyUser.TestTC01 object at 0x000001B13C6B3CE0>\nsetup = <Page url='https://149.255.39.63/notifications'>, config = <class 'utilities.config.config_stage.Config'>\n\n    @allure.title(\"Verify that Adding Notify User list and In-App notifications are received.\")\n    def test_add_notify_user(self, setup, config):\n        page = setup\n        home_page = HomePage(page)\n        login_page = LoginPage(page)\n        filter_page = FilterPage(page)\n        job_page = JobPage(page)\n    \n        notifyUser = RandomUtils.get_email()\n    \n    \n        login_page.navigate(config.BASE_URL)\n        login_page.enter_username(config.username)\n        login_page.enter_password(config.password)\n        login_page.click_login(\"Sign In\")\n    \n    \n    \n        test_data = TestDataManager.get_test_data()\n        well = test_data[\"wells\"][\"wellname_1\"]\n        Object_list = test_data[\"wells\"][\"RigObjectlist\"]\n        data_Object = \"Rig\"\n    \n        home_page.select_module(\"/jobs\")\n        filter_page.Button(\"Create Job\")\n        filter_page.Button(\"Skip\")\n        filter_page.input_field(well)\n        filter_page.click_search(\"searchicon\")\n        filter_page.select_well(well)\n        wellbore_name = filter_page.get_wellbore_name(well)\n        filter_page.assert_wellname_button(well)\n        filter_page.select_object(data_Object)\n        filter_page.deselectAll_objects(data_Object)\n        filter_page.select_ObjectCheckbox(data_Object, [\"PATTERSON_257\"])\n        filter_page.select_object(data_Object)\n        filter_page.select_objects_and_select_all(Object_list)\n    \n        # notify user\n        filter_page.enterNotifyUser([notifyUser])\n    \n        # extraction\n        filter_page.Button(\"Extract and Create Job\")\n        filter_page.Button(\"Yes\")\n        time.sleep(5)\n    \n        # job summary\n        job_id = job_page.get_jobnumber()\n>       job_page.job_status(job_id)\n\ntests\\Notifications\\test_TC01_addNotifyUser.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\job_page.py:118: in job_status\n    job_status = self.get_job_status(job_number)  # Replace with the actual method to fetch job status\npages\\job_page.py:17: in get_job_status\n    return self.get_text(element_xpath, f\"{job_number} status\")\npages\\base_page.py:271: in get_text\n    self.page.wait_for_selector(selector)\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\playwright\\sync_api\\_generated.py:7789: in wait_for_selector\n    self._sync(\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\playwright\\_impl\\_page.py:373: in wait_for_selector\n    return await self._main_frame.wait_for_selector(**locals_to_params(locals()))\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\playwright\\_impl\\_frame.py:323: in wait_for_selector\n    await self._channel.send(\"waitForSelector\", locals_to_params(locals()))\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\playwright\\_impl\\_connection.py:59: in send\n    return await self._connection.wrap_api_call(\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\playwright\\_impl\\_connection.py:509: in wrap_api_call\n    return await cb()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Channel object at 0x000001B13F97A270>, method = 'waitForSelector'\nparams = {'selector': \"//table[@class='mat-table cdk-table mat-sort jobs-table']/tbody/tr/td/span[text()='789']/ancestor::tr/td[2]\"}\nreturn_as_dict = False\n\n    async def inner_send(\n        self, method: str, params: Optional[Dict], return_as_dict: bool\n    ) -> Any:\n        if params is None:\n            params = {}\n        if self._connection._error:\n            error = self._connection._error\n            self._connection._error = None\n            raise error\n        callback = self._connection._send_message_to_server(\n            self._object, method, _filter_none(params)\n        )\n        done, _ = await asyncio.wait(\n            {\n                self._connection._transport.on_error_future,\n                callback.future,\n            },\n            return_when=asyncio.FIRST_COMPLETED,\n        )\n        if not callback.future.done():\n            callback.future.cancel()\n>       result = next(iter(done)).result()\nE       playwright._impl._errors.TimeoutError: Timeout 60000ms exceeded.\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\playwright\\_impl\\_connection.py:97: TimeoutError"}, "attachments": [{"name": "Navigation", "source": "720914b9-cd78-4b82-adbb-4ccb0f266b5e-attachment.txt", "type": "text/plain"}, {"name": "Input", "source": "9d7044ba-799f-4f42-9a7f-d1c419a22ab3-attachment.txt", "type": "text/plain"}, {"name": "Input", "source": "75bc6809-4ef3-41bc-a1ac-3a1b6958805f-attachment.txt", "type": "text/plain"}, {"name": "Click Action", "source": "c42c1394-8633-41a9-9034-cbe778785509-attachment.txt", "type": "text/plain"}, {"name": "Click Action", "source": "a6d1289e-cef5-4ba4-9ca3-c250adba9f95-attachment.txt", "type": "text/plain"}, {"name": "Click Action", "source": "a89cb745-bac7-40dc-89ef-20c62d40b28b-attachment.txt", "type": "text/plain"}, {"name": "Click Action", "source": "1c82f80f-d346-4587-96e4-39ac9dc8a1b7-attachment.txt", "type": "text/plain"}, {"name": "Input", "source": "fba49e1c-6e9b-4252-835d-84e9708d53af-attachment.txt", "type": "text/plain"}, {"name": "Click Action", "source": "0f2666c9-9a6e-46ef-bbb0-de510eaad0e5-attachment.txt", "type": "text/plain"}, {"name": "Scroll", "source": "069d24f4-ce80-4fca-8664-69688ea8561c-attachment.txt", "type": "text/plain"}, {"name": "Click Action", "source": "57840f1e-ad88-4c42-822f-8f23a619d940-attachment.txt", "type": "text/plain"}, {"name": "Get Text", "source": "4112c8d6-e877-428b-b800-ff5d7b057af3-attachment.txt", "type": "text/plain"}, {"name": "Text Content", "source": "9f7769f2-211b-40fd-adbe-c5b0b12391ae-attachment.txt", "type": "text/plain"}, {"name": "Get Text", "source": "8e4a186e-d140-4bdc-a805-aea4532f28ed-attachment.txt", "type": "text/plain"}, {"name": "Text Content", "source": "2291d90a-19a8-4172-8551-a7b1e0c4a979-attachment.txt", "type": "text/plain"}, {"name": "Click Action", "source": "aa0b3662-23aa-40f4-8655-3293c00171ce-attachment.txt", "type": "text/plain"}, {"name": "Click Action", "source": "7be6d6d2-3f91-4f66-806c-976dec8e39ea-attachment.txt", "type": "text/plain"}, {"name": "Click Action", "source": "59ba5492-d5b7-4604-a0f4-b85856bb965c-attachment.txt", "type": "text/plain"}, {"name": "Click Action", "source": "fa48cbca-0285-4011-b50b-85dfcbd947b1-attachment.txt", "type": "text/plain"}, {"name": "Click Action", "source": "34e7d5f7-c7e1-4006-9ccc-77c627956857-attachment.txt", "type": "text/plain"}, {"name": "Click Action", "source": "9ed231cd-cfea-4310-88de-64709807f74c-attachment.txt", "type": "text/plain"}, {"name": "Click Action", "source": "5e065b28-f86b-4a4a-b37c-b0b1c5f1eb35-attachment.txt", "type": "text/plain"}, {"name": "Click Action", "source": "74a35de6-32e8-4089-baf7-7e811b0c19f9-attachment.txt", "type": "text/plain"}, {"name": "Click Action", "source": "93ae93be-1ff8-44f6-a69b-9cb0d7cff610-attachment.txt", "type": "text/plain"}, {"name": "Click Action", "source": "5eb22c70-41ce-41d1-9649-1b3bc090c747-attachment.txt", "type": "text/plain"}, {"name": "Click Action", "source": "8ef71a92-ec1c-4dba-aa9b-5c3387e922bc-attachment.txt", "type": "text/plain"}, {"name": "Click Action", "source": "3beffb88-d2fd-4543-ab6d-3aa0a06a3ebb-attachment.txt", "type": "text/plain"}, {"name": "Input", "source": "b80710a0-0d0d-427c-b426-984a41238e67-attachment.txt", "type": "text/plain"}, {"name": "Click Action", "source": "3a04be94-083a-477f-bf0f-976ba18b73bb-attachment.txt", "type": "text/plain"}, {"name": "Click Action", "source": "daa239ec-574a-4ecc-8473-b4314b0e1737-attachment.txt", "type": "text/plain"}, {"name": "Click Action", "source": "b02dd9c5-8f81-4e8e-acfc-8ae0b7e16be3-attachment.txt", "type": "text/plain"}, {"name": "Get Text", "source": "8aabb61e-d801-466a-b128-7cdeb449870d-attachment.txt", "type": "text/plain"}, {"name": "Text Content", "source": "95226e9b-befa-4af3-b537-7660ed75c117-attachment.txt", "type": "text/plain"}, {"name": "Get Text", "source": "a896e988-ad51-4b17-8bbb-e89125c5969a-attachment.txt", "type": "text/plain"}, {"name": "Text Content", "source": "7323de4f-85a7-40a9-acea-28f4a55b778b-attachment.txt", "type": "text/plain"}, {"name": "Click Action", "source": "47b30ddc-6c77-44e4-b703-28c8bde4c290-attachment.txt", "type": "text/plain"}, {"name": "Get Text", "source": "99bafab1-a0be-4b49-a482-f052c0d833e2-attachment.txt", "type": "text/plain"}, {"name": "Screenshot", "source": "b05da1c2-766c-401d-af80-1c6628c1f9be-attachment.png", "type": "image/png"}], "start": 1745498302429, "stop": 1745498456394, "uuid": "814e8610-44c0-4461-a8c2-538221e38770", "historyId": "d56f64867014d7f050e1fa4f7c3b663c", "testCaseId": "d56f64867014d7f050e1fa4f7c3b663c", "fullName": "tests.Notifications.test_TC01_addNotifyUser.TestTC01#test_add_notify_user", "labels": [{"name": "suite", "value": "Notifications"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "tests.Notifications"}, {"name": "subSuite", "value": "TestTC01"}, {"name": "host", "value": "PavanKarri"}, {"name": "thread", "value": "27864-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.Notifications.test_TC01_addNotifyUser"}]}